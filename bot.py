import re
from datetime import datetime
import asyncio
import logging
from aiogram import F, html
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import Message, FSInputFile, LinkPreviewOptions
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hide_link
from aiogram.utils.formatting import Text, Bold
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from config_reader import config

import httpx

logging.basicConfig(level=logging.INFO)


bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")


@dp.message(Command("special_buttons"))
async def cmd_special_buttons(message: types.Message):
    builder = ReplyKeyboardBuilder()
    # –º–µ—Ç–æ–¥ row –ø–æ–∑–≤–æ–ª—è–µ—Ç —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—è–¥
    # –∏–∑ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π —Ä—è–¥
    # –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫...
    builder.row(
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True),
    )
    # ... –≤—Ç–æ—Ä–æ–π –∏–∑ –æ–¥–Ω–æ–π ...
    builder.row(types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", request_poll=types.KeyboardButtonPollType(type="quiz")))
    # ... –∞ —Ç—Ä–µ—Ç–∏–π —Å–Ω–æ–≤–∞ –∏–∑ –¥–≤—É—Ö
    builder.row(
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            request_user=types.KeyboardButtonRequestUser(request_id=1, user_is_premium=True),
        ),
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ä—É–º–∞–º–∏",
            request_chat=types.KeyboardButtonRequestChat(request_id=2, chat_is_channel=False, chat_is_forum=True),
        ),
    )
    # WebApp-–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, —Å–æ—Ä—Ä–∏ :(

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@dp.message(Command('reply_builder'))
async def reply_builder(message: types.Message):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 17):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(4)
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=builder.as_markup(
            resize_keyboard=True, one_time_keyboard=True)
    )


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text='–° –ø—é—Ä–µ—à–∫–æ–π'),
        types.KeyboardButton(text='–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏')]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏')
    await message.answer('–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?', reply_markup=keyboard)


@dp.message(F.text.lower() == '—Å –ø—é—Ä–µ—à–∫–æ–π')
async def with_puree(message: types.Message):
    await message.reply('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!', reply_markup=types.ReplyKeyboardRemove())


@dp.message(F.text.lower() == '–±–µ–∑ –ø—é—Ä–µ—à–∫–∏')
async def withour_puree(message: types.Message):
    await message.reply('–¢–∞–∫ –Ω–µ –≤–∫—É—Å—Ç–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())


@dp.message(Command("hidden_link"))
async def cmd_hidden_link(message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –∫–æ—Ç–∞—Ö –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async with httpx.AsyncClient() as client:
        fact_response = await client.get('https://cat-fact.herokuapp.com/facts/random')
        image_response = await client.get('https://api.thecatapi.com/v1/images/search')

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fact = fact_response.json().get('text', '–§–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        image_url = image_response.json()[0].get('url')

    hidden_link_text = f"[–°–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞]({fact_response.url})"

    await message.answer(
        f"{hidden_link_text} "
        f"–§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö: *{fact}*n"
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram: *—Å—É—â–µ—Å—Ç–≤—É–µ—Ç*n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *–Ω–µ —á–∏—Ç–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é*n"
        "–ì—Ä—É—à–∞:",
        disable_web_page_preview=False,  # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
        parse_mode=ParseMode.MARKDOWN,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞
    if image_url:
        await message.answer_photo(image_url, caption="–í–æ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞!")


@dp.message(Command("album"))
async def cmd_album(message: Message):
    album_builder = MediaGroupBuilder(
        caption="–û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–ª—å–±–æ–º–∞"
    )
    album_builder.add(
        type="photo",
        media=FSInputFile("image_from_pc.jpg")
        # caption="–ü–æ–¥–ø–∏—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ–¥–∏–∞"

    )
    # –ï—Å–ª–∏ –º—ã —Å—Ä–∞–∑—É –∑–Ω–∞–µ–º —Ç–∏–ø, —Ç–æ –≤–º–µ—Å—Ç–æ –æ–±—â–µ–≥–æ add
    # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å add_<—Ç–∏–ø>
    album_builder.add_photo(
        # –î–ª—è —Å—Å—ã–ª–æ–∫ –∏–ª–∏ file_id –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        media="https://picsum.photos/seed/groosha/400/300"
    )
    album_builder.add_photo(
        media="<–≤–∞—à file_id>"
    )
    await message.answer_media_group(
        # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å build()
        media=album_builder.build()
    )


@dp.message(F.animation)
async def echo_gif(message: Message):
    await message.reply_animation(message.animation.file_id)


@dp.message(Command('help'))
@dp.message(CommandStart(
    deep_link=True, magic=F.args == 'help'
))
async def cmd_start_help(message: Message):
    await message.answer('–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π')


@dp.message(CommandStart(
    deep_link=True,
    magic=F.args.regexp(re.compile(r'book_(\d+)'))
))
async def cmd_start_book(
        message: Message,
        command: CommandObject
):
    book_number = command.args.split("_")[1]
    await message.answer(f"Sending book ‚Ññ{book_number}")


@dp.message(Command("settimer"))  #  prefix='%' –º–µ–Ω—è–µ–º —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å
async def cmd_settimer(message: Message, command: CommandObject):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ
    # command.args –±—É–¥–µ—Ç None
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n" "/settimer <time> <message>")
        return
    await message.answer("–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n" f"–í—Ä–µ–º—è: {delay_time}\n" f"–¢–µ–∫—Å—Ç: {text_to_send}")


# @dp.message(F.text)
# async def extract_data(message: Message):
#     data = {"url": "<N/A>", "email": "<N/A>", "code": "<N/A>"}
#     entities = message.entities or []
#     for item in entities:
#         if item.type in data.keys():
#             # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
#             # data[item.type] = message.text[item.offset : item.offset+item.length]
#             # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
#             data[item.type] = item.extract_from(message.text)
#     await message.reply(
#         "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
#         f"URL: {html.quote(data['url'])}\n"
#         f"E-mail: {html.quote(data['email'])}\n"
#         f"–ü–∞—Ä–æ–ª—å: {html.quote(data['code'])}"
#     )


@dp.message(F.text)
async def echo_with_time(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–ö
    time_now = datetime.now().strftime('%H:%M')
    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
    added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await message.answer(f"{message.text}\n\n{added_text}", parse_mode="HTML")


@dp.message(Command("hello"))
async def cmd_hello(message: Message):
    content = Text('Hello, ', Bold(message.from_user.full_name))
    await message.answer(**content.as_kwargs())


@dp.message(F.text, Command("test"))
async def any_message(message: Message):
    await message.answer("Hello, <b>world</b>!",
                          parse_mode=ParseMode.HTML)
    await message.answer("Hello, *world*\!",
                          parse_mode=ParseMode.MARKDOWN_V2)


@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")


@dp.message(Command('reply'))
async def cmd_reply(message: types.Message):
    await message.reply("–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å '–æ—Ç–≤–µ—Ç–æ–º'")


@dp.message(Command('answer'))
async def cmd_answer(message: types.Message):
    await message.answer('–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')


@dp.message(Command('dice'))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji='üé≤')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
