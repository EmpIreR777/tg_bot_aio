from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery

from keyboards.all_kb import create_rat, main_kb, create_spec_kb
from keyboards.inline_kbs import ease_link_kb, get_inline_kb
from utils.utils import get_random_person

start_router = Router()


@start_router.callback_query(F.data == 'back_home')
async def cmd_back_home(call: CallbackQuery):
    await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω!', show_alert=False)
    await call.message.answer(
        '–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', reply_markup=main_kb(call.from_user.id)
    )


@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer(
        '–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!',
        reply_markup=get_inline_kb()
    )


@start_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    command_args: str = command.args
    if command_args:
        await message.answer(
            f'–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart() —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>',
            reply_markup=main_kb(message.from_user.id),
        )
    else:
        await message.answer(
            f'–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart() –±–µ–∑ –º–µ—Ç–∫–∏',
            reply_markup=main_kb(message.from_user.id),
        )


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart()', reply_markup=main_kb(message.from_user.id))


@start_router.message(Command('start_2'))
async def cmd_start_2(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()', reply_markup=create_spec_kb())


@start_router.message(F.text == '/start_3')
async def cmd_start_3(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!', reply_markup=create_rat())
