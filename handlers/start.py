import asyncio
import os
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import (Message, CallbackQuery,
                           FSInputFile, InputMediaVideo,
                           InputMediaPhoto,
                           ReplyKeyboardRemove)
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import text

from db_handler.db_funk import get_user_data, insert_user
from keyboards.all_kb import (create_rat, home_page_kb, main_kb,
                            create_spec_kb, gender_kb)
from keyboards.inline_kbs import (
    ease_link_kb, get_inline_kb, create_gst_inline_kb,
    get_login_tg, check_data)
from utils.utils import get_random_person, get_msc_date, extract_number
from utils.dict import questions
from create_bot import bot, admins, all_media_dir
from filters.is_admin import IsAdmin


class Form(StatesGroup):
    gender = State()
    age = State()
    full_name = State()
    user_login = State()
    photo = State()
    about = State()
    check_state = State()


questionnaire_router = Router()


@questionnaire_router.message(Command('start_questionnaire'))
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: ', reply_markup=gender_kb())
    await state.set_state(Form.gender)


@questionnaire_router.message((F.text.lower().contains('–º—É–∂—á–∏–Ω–∞')) | (F.text.lower().contains('–∂–µ–Ω—â–∏–Ω–∞')), Form.gender)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(
        gender=message.text, user_id=message.from_user.id
        )
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.age)


@questionnaire_router.message(F.text, Form.gender)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç–µ—Ö —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:',
            reply_markup=gender_kb())
        await state.set_state(Form.gender)


@questionnaire_router.message(F.text, Form.age)
async def start_questionnaire_process(message: Message, state: FSMContext):
    check_age =  extract_number(message.text)
    if not check_age or not (1 <= int(message.text) <= 100):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100).")
        return
    await state.update_data(age=check_age)
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è:')
    await state.set_state(Form.full_name)


@questionnaire_router.message(F.text, Form.full_name)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    text = '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ'
    if message.from_user.username:
        text += ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏–º –ª–æ–≥–∏–Ω–æ–º –±—É–¥–µ—Ç –ª–æ–≥–∏–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞:'
        await message.answer(text, reply_markup=get_login_tg())
    else:
        text += ' : '
        await message.answer(text)
    await state.set_state(Form.user_login)


# –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–≥–¥–∞ –º—ã –±–µ—Ä–µ–º –ª–æ–≥–∏–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º
@questionnaire_router.callback_query(F.data, Form.user_login)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–ë–µ—Ä—É –ª–æ–≥–∏–Ω —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø—Ä–æ—Ñ–∏–ª—è')
    await call.message.edit_reply_markup(reply_markup=None)
    await state.update_data(user_login=call.from_user.username)
    await call.message.answer('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ: ')
    await state.set_state(Form.photo)


# –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–≥–¥–∞ –º—ã –±–µ—Ä–µ–º –ª–æ–≥–∏–Ω –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@questionnaire_router.message(F.text, Form.user_login)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(user_login=message.from_user.username)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ: ')
    await state.set_state(Form.photo)


@questionnaire_router.message(F.photo, Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ[-1]: ')
    await state.set_state(Form.about)


@questionnaire_router.message(F.document.mime_type.startswith('image/'), Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    photo_id = message.document.file_id
    await state.update_data(photo=photo_id)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ image/: ')
    await state.set_state(Form.about)


@questionnaire_router.message(F.document, Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!')
    await state.set_state(Form.photo)


@questionnaire_router.message(F.text, Form.about)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(about=message.text)

    data = await state.get_data()

    caption = (
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ: \n\n'
        f'<b>–ü–æ–ª–Ω–æ–µ –∏–º—è</b>: {data.get("full_name")}\n'
        f'<b>–ü–æ–ª</b>: {data.get("gender")}\n'
        f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {data.get("age")} –ª–µ—Ç\n'
        f'<b>–õ–æ–≥–∏–Ω –≤ –±–æ—Ç–µ</b>: {data.get("user_login")}\n'
        f'<b>–û —Å–µ–±–µ</b>: {data.get("about")}'
    )

    await message.answer_photo(photo=data.get('photo'), caption=caption, reply_markup=check_data())
    await state.set_state(Form.check_state)


# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
@questionnaire_router.callback_query(F.data == 'correct', Form.check_state)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    user_data = await state.get_data()
    user_data['date_reg'] = datetime.now().replace(second=0, microsecond=0)
    await insert_user(user_data)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=main_kb(call.from_user.id)
    )
    await state.clear()


@questionnaire_router.callback_query(F.data == 'incorrect', Form.check_state)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–∞—á–∞–ª–∞')
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:',
                              reply_markup=gender_kb())
    await state.set_state(Form.gender)


""" –í—Å—ë —á—Ç–æ –Ω–∏–∂–µ —ç—Ç–æ –±–µ–∑ FSM."""
start_router = Router()


@start_router.message(Command('profile'))
@start_router.message(F.text.contains('–ü—Ä–æ—Ñ–∏–ª—å'))
async def start_profile(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        profile_message = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"<b>üÜî ID:</b> {user_info['user_id']}\n"
            f"<b>üíº –õ–æ–≥–∏–Ω:</b> @{user_info['user_login']}\n"
            f"<b>üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user_info['full_name']}\n"
            f"<b>üßë‚Äçü¶∞ –ü–æ–ª:</b> {user_info['gender']}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user_info['age']}\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_info['date_reg']}\n"
            f"<b>üìù –û —Å–µ–±–µ:</b> {user_info['about']}\n"
            f'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_info.get("count_refer")}</b>\n\n'
            f"<b>üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: </b>"
            f'<code>https://t.me/new_aio_test_bot?start={message.from_user.id}</code>'
        )
        await message.answer_photo(photo=user_info.get('photo'), caption=profile_message)
        await message.answer(text='asdas', reply_markup=home_page_kb(message.from_user.id))


@start_router.message(Command('send_media_group'))
async def cmd_start(message: Message, state: FSMContext):
    photo_1 = InputMediaPhoto(type='photo',
                              media=FSInputFile(path=os.path.join(all_media_dir, 'i (1).webp')),
                              caption='–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ <b>–í–°–ï–ô</b> –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ')
    photo_2 = InputMediaPhoto(type='photo',
                              media=FSInputFile(path=os.path.join(all_media_dir, 'i (2).webp')))
    photo_3 = InputMediaPhoto(type='photo',
                              media=FSInputFile(path=os.path.join(all_media_dir, 'sample-birch-400x300.jpg')))
    video_1 = InputMediaVideo(type='video',
                              media=FSInputFile(path=os.path.join(all_media_dir, 'sample-10s.mp4')))
    photo_4 = InputMediaPhoto(type='photo',
                              media=FSInputFile(path=os.path.join(all_media_dir, 'sample-blue-200x200.jpg')))
    video_2 = InputMediaVideo(type='video',
                              media=FSInputFile(path=os.path.join(all_media_dir, 'sample-9s.mp3')))

    media = [photo_1, photo_2, photo_3, video_1, photo_4, video_2]
    await message.answer_media_group(media=media)


@start_router.message(F.video_note)
async def cmd_start(message: Message, state: FSMContext):
    print(message.video_note.file_id)


@start_router.message(Command('send_voice'))
async def cmd_start(message: Message, state: FSMContext):
    async with ChatActionSender.record_voice(
        bot=bot, chat_id=message.from_user.id):
        await asyncio.sleep(3)
        await message.answer_voice(voice=FSInputFile(
            path=os.path.join(all_media_dir, 'sample-12s.mp3')))


@start_router.message(Command('send_video_note'))
async def cmd_start(message: Message, state: FSMContext):
    async with ChatActionSender.record_video_note(bot=bot, chat_id=message.from_user.id):
        await asyncio.sleep(3)
        await message.answer_video_note(
            video_note='sample-10s.mp4')


@start_router.message(Command('send_video'))
async def cmd_start(message: Message, state: FSMContext):
    video_file = FSInputFile(path=os.path.join(all_media_dir, 'sample-10s.mp4'))
    msg_1 = await message.answer_video(video=video_file, caption='–ú–æ—è <b>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å</b> –∫ —Ñ–∞–π–ª—É')
    await asyncio.sleep(2)
    await msg_1.edit_caption(caption='–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∏–¥–µ–æ 1')

    await asyncio.sleep(2)
    new_video_file = FSInputFile(path=os.path.join(
        all_media_dir, 'sample-5s.mp4'))
    await msg_1.edit_media(
        media=InputMediaVideo(media=new_video_file, caption='–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏ —É –Ω–µ–≥–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'),
        reply_markup=ease_link_kb(),
    )


@start_router.message(Command('send_video'))
async def cmd_start(message: Message, state: FSMContext):
    video_file = FSInputFile(path=os.path.join(all_media_dir, 'sample-10s.mp4'))
    msg = await message.answer_video(
        video=video_file, reply_markup=main_kb(message.from_user.id), caption='–ú–æ—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É'
    )
    await asyncio.sleep(2)
    await msg.answer_video(video=msg.video.file_id, caption='–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–æ–µ–º—É –≤–∏–¥–µ–æ.', reply_markup=main_kb(message.from_user.id))
    await msg.delete()


@start_router.message(Command('send_photo'))
async def cmd_start(message: Message, state: FSMContext):
    # photo_file = FSInputFile(path=os.path.join(
    #     all_media_dir, 'i (2).webp'))
    # photo_id = 'AgACAgIAAxkDAAIDHGdXC3uNRjhRprdUahNZ8THx5OleAAJ-6zEbdoC4Sj46Af_y5PsLAQADAgADeQADNgQ'
    photo_url = 'https://avatars.mds.yandex.net/i?id=22a42b764502e262f9cc3af7bfa627bf_l-3563662-images-thumbs&n=13'
    msg_id = await message.answer_photo(
        photo=photo_url,
        reply_markup=main_kb(message.from_user.id),
        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–æ—Ç–æ</b>',
    )
    print(msg_id.photo[-1].file_id)


@start_router.message(Command('send_audio'))
async def cmd_start(message: Message, state: FSMContext):
    # audio_file = FSInputFile(path=os.path.join(all_media_dir, 'sample-12s.mp3'), filename='audio')
    audio_id = 'CQACAgIAAxkDAAICxGdXAkv2KhExiwnm-BWD-W1AygTaAALuZgACCDO4SpN1gT2IInStNgQ'
    msg_id = await message.answer_audio(
        audio=audio_id,
        reply_markup=main_kb(message.from_user.id),
        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–∞–π–ª—É</b>',
    )


# @start_router.message(Command('test_edit_msg'))
# async def cmd_start(message: Message, state: FSMContext):
#     msg = await message.answer('<s>–ü–†–ò–í–ï–¢!</s>')
#     print(msg.html_text)


# @start_router.message(Command('test_edit_msg'))
# async def cmd_start(message: Message, state: FSMContext):
#     msg = await message.answer('–ü—Ä–∏–≤–µ—Ç!')
#     await asyncio.sleep(2)
#     old_text = msg.text
#     await msg.delete()
#     await message.answer(old_text, reply_markup=main_kb(message.from_user.id))


@start_router.message(Command('test_edit_msg'))
async def cmd_start(message: Message, state: FSMContext):
    # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞ msg
    msg = await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ')
    # –î–æ—Å—Ç–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_id = msg.message_id
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–í –∫–æ–¥–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, ‚Äî —Å—Ç—Ä–æ–∫–∞:
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await message.answer('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –µ—â—ë –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, ID –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
    await bot.edit_message_text(text='<b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ!!!</b>', chat_id=message.from_user.id, message_id=msg_id)


@start_router.message(F.text.lower().contains('–æ—Ö–æ—Ç–Ω–∏–∫'))
async def cmd_start(message: Message, state: FSMContext):
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer('–Ø –¥—É–º–∞—é, —á—Ç–æ —Ç—ã —Ç—É—Ç –ø—Ä–æ —Ä–∞–¥—É–≥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å')
    # —Ç–æ –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    await bot.send_message(chat_id=message.from_user.id, text='–î–ª—è –º–µ–Ω—è —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ')
    # –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—É
    msg = await message.reply('–ù—É –≤–æ—Ç —á—Ç–æ –∑–∞ –≥–ª—É–ø–æ—Å—Ç–∏!?')

    # –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—É, —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot
    await bot.send_message(
        chat_id=message.from_user.id, text='–•–æ—Ç—è, —ç—Ç–æ –∑–∞–±–∞–≤–Ω–æ...', reply_to_message_id=msg.message_id
    )
    await bot.forward_message(
        chat_id=message.from_user.id, from_chat_id=message.from_user.id, message_id=msg.message_id
    )
    data_task = {
        'user_id': message.from_user.id,
        'full_name': message.from_user.full_name,
        'username': message.from_user.username,
        'message_id': message.message_id,
        'date': get_msc_date(message.date),
    }
    print(data_task)


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'), IsAdmin(admins))
async def process_find_word(message: Message):
    await message.answer('–û, –∞–¥–º–∏–Ω, –∑–¥–∞—Ä–æ–≤–∞! –ê —Ç–µ–±–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è.')


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è", –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')


@start_router.message(Command(commands=["settings", "about"]))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    command_name = 'settings' if 'settings' in message.text else 'about'
    response = f'–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command_name}'
    if command_args:
        response += f' —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>'
    else:
        response += ' –±–µ–∑ –º–µ—Ç–∫–∏'
    await message.answer(response)


@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id,
                                action='typing'):
        await asyncio.sleep(2)
        await call.message.answer(
            msg_text,
            reply_markup=create_gst_inline_kb(questions))


@start_router.message(Command('faq'))
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏',
                         reply_markup=create_gst_inline_kb(questions))


@start_router.callback_query(F.data == 'back_home')
async def cmd_back_home(call: CallbackQuery):
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id,
                                action='typing'):
        await asyncio.sleep(2)
        await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω!', show_alert=False)
        main_screen_message = await call.message.answer('–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', reply_markup=main_kb(call.from_user.id))

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await call.message.edit_reply_markup(reply_markup=None)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —É—Å–ª–æ–≤–∏—é
        await asyncio.sleep(5)  # –ñ–¥—ë–º, –Ω–∞–ø—Ä–∏–º–µ—Ä  —Å–µ–∫—É–Ω–¥
        await main_screen_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"


@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id,
                                action='typing'):
        await asyncio.sleep(2)
        await call.message.answer(formatted_message)
        await call.message.edit_reply_markup(reply_markup=None)


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer(
        '–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!',
        reply_markup=get_inline_kb()
    )


@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
    if user_info:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç. –Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∞ –∑–Ω–∞—á–∏—Ç —Ç–µ–±–µ –º–æ–∂–Ω–æ ' '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',
            reply_markup=main_kb(message.from_user.id),
        )
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', reply_markup=gender_kb())
        await state.set_state(Form.gender)


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart()', reply_markup=main_kb(message.from_user.id))


@start_router.message(Command('start_2'))
async def cmd_start_2(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()', reply_markup=create_spec_kb())


@start_router.message(F.text == '/start_3')
async def cmd_start_3(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!', reply_markup=create_rat())
